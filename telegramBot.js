const TelegramBot = require("node-telegram-bot-api");
const db = require("./db");

const token = '6835736852:AAGJL4zqg5Qd8aE7Di2zaXm5ccuZE9RNa5Y';
const webAppUrl = 'https://rococo-lily-4bd96e.netlify.app';

const bot = new TelegramBot(token, { polling: true });
    // TODO: Chat is privet?
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (text === '/start') {
        await bot.sendMessage(chatId, '–ù–∏–∂–µ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞, –∑–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É ', {
            reply_markup: {
                keyboard: [
                    [{ text: '–ê–¥—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏', web_app: { url: `${webAppUrl}/form` } }]
                ]
            }
        });

        await bot.sendMessage(chatId, '–ó–∞—Ö–æ–¥–∏ –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üç± –ú–µ–Ω—é', web_app: { url: webAppUrl } }],
                    [{ text: 'üéüÔ∏è –ê–∫—Ü–∏–∏', web_app: { url: `${webAppUrl}/discounts` } }],
                    [{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', web_app: { url: `${webAppUrl}/profile` } }],
                    [{ text: 'üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã', web_app: { url: `${webAppUrl}/contacts` } }]
                ]
            }
        });
    }

    if (msg?.web_app_data?.data) {
        try {
            const data = JSON.parse(msg?.web_app_data?.data);
            console.log(data);

            // Combine country, street, and district into a single address
            const addressValue = `${data?.country}, ${data?.street}, ${data?.district}`;

            // Save or update user information in the Users table
            const query = `
                INSERT INTO Users (address, username)
                VALUES (?, ?)
                ON DUPLICATE KEY UPDATE
                address = VALUES(address), username = VALUES(username);
            `;

            const values = [addressValue, data?.username];

            db.query(query, values, (err, result) => {
                if (err) {
                    console.error('Error saving user information to the database: ' + err.stack);
                    return;
                }
                console.log('User information saved to the database');
            });

            await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!');
            await bot.sendMessage(chatId, '–í–∞—à –∞–¥—Ä–µ—Å: ' + addressValue);
            await bot.sendMessage(chatId, '–í–∞—à —é–∑–µ—Ä–Ω–µ–π–º: ' + data?.username);

            setTimeout(async () => {
                await bot.sendMessage(chatId, '–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç');
            }, 3000);
        } catch (e) {
            console.log(e);
        }
    }
});

module.exports = { bot };
